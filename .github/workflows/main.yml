name: Plugin Build
on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main

env:
  PLUGIN_NAME: 'obs-multistream'

jobs:
  clang_check:
    name: 01 - Code Format Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install clang-format
        run: sudo apt-get install -y clang-format-13

      - name: Check code formatting
        run: |
          find src -name '*.cpp' -o -name '*.h' | xargs clang-format-13 --dry-run --Werror
          echo "✅ Code formatting check passed"

  windows_build:
    name: 02 - Windows
    runs-on: windows-2022
    needs: clang_check
    if: always()
    outputs:
      artifacts: ${{ steps.package.outputs.artifacts }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup OBS Development Environment
        run: |
          # Download OBS Studio development headers
          $obsVersion = "30.0.2"
          $obsUrl = "https://github.com/obsproject/obs-studio/releases/download/$obsVersion/obs-studio-$obsVersion-full-x64.zip"
          
          Write-Host "📥 Downloading OBS Studio $obsVersion..."
          Invoke-WebRequest -Uri $obsUrl -OutFile "obs-studio.zip" -TimeoutSec 300
          
          Write-Host "📂 Extracting OBS Studio..."
          Expand-Archive -Path "obs-studio.zip" -DestinationPath "obs-temp" -Force
          
          # Create development directory structure
          New-Item -ItemType Directory -Path "C:\obs-dev\include" -Force
          New-Item -ItemType Directory -Path "C:\obs-dev\lib" -Force
          New-Item -ItemType Directory -Path "C:\obs-dev\bin" -Force
          
          # Find the actual extracted directory (it might be nested)
          $extractedDir = Get-ChildItem -Path "obs-temp" -Directory | Select-Object -First 1
          if ($extractedDir) {
            $obsRoot = $extractedDir.FullName
            Write-Host "🔍 Found OBS directory: $obsRoot"
            
            # Copy include files
            if (Test-Path "$obsRoot\include") {
              Copy-Item -Path "$obsRoot\include\*" -Destination "C:\obs-dev\include" -Recurse -Force
              Write-Host "✅ Copied include files"
            }
            
            # Copy libraries from bin/64bit
            if (Test-Path "$obsRoot\bin\64bit") {
              Copy-Item -Path "$obsRoot\bin\64bit\*.lib" -Destination "C:\obs-dev\lib" -Force
              Copy-Item -Path "$obsRoot\bin\64bit\*.dll" -Destination "C:\obs-dev\bin" -Force
              Write-Host "✅ Copied library files"
            }
            
            # Also check obs-plugins for additional libs
            if (Test-Path "$obsRoot\obs-plugins\64bit") {
              Copy-Item -Path "$obsRoot\obs-plugins\64bit\*.lib" -Destination "C:\obs-dev\lib" -Force -ErrorAction SilentlyContinue
            }
          }
          
          # Verify critical files exist
          $criticalFiles = @(
            "C:\obs-dev\include\obs-module.h",
            "C:\obs-dev\include\obs-frontend-api.h",
            "C:\obs-dev\include\obs.h"
          )
          
          foreach ($file in $criticalFiles) {
            if (Test-Path $file) {
              Write-Host "✅ Found: $file"
            } else {
              Write-Host "❌ Missing: $file"
              # Try to find the file in subdirectories
              $found = Get-ChildItem -Path "C:\obs-dev\include" -Name (Split-Path $file -Leaf) -Recurse -ErrorAction SilentlyContinue
              if ($found) {
                Write-Host "📍 Found in: $($found[0])"
              }
            }
          }
          
          Write-Host "🚀 OBS development environment setup complete"

      - name: Build Plugin
        run: |
          Write-Host "🔨 Building OBS Multistream Plugin..."
          
          # Ensure proper platform targeting
          $env:PLATFORM = "x64"
          $env:Configuration = "Release"
          
          # Build the solution
          MSBuild.exe obs-multistream.sln `
            /p:Configuration=Release `
            /p:Platform=x64 `
            /p:PlatformToolset=v143 `
            /p:WindowsTargetPlatformVersion=10.0 `
            /verbosity:minimal `
            /maxcpucount
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "❌ Build failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          
          Write-Host "✅ Build completed successfully"

      - name: Verify Build Output
        run: |
          $buildPaths = @(
            "bin\Release",
            "bin\x64\Release", 
            "x64\Release",
            "Release"
          )
          
          $dllFound = $false
          foreach ($path in $buildPaths) {
            $dllPath = "$path\${{ env.PLUGIN_NAME }}.dll"
            if (Test-Path $dllPath) {
              Write-Host "✅ Found plugin DLL at: $dllPath"
              $script:actualDllPath = $dllPath
              $dllFound = $true
              break
            }
          }
          
          if (-not $dllFound) {
            Write-Host "❌ Plugin DLL not found in expected locations"
            Write-Host "📁 Searching for DLL files..."
            Get-ChildItem -Recurse -Filter "*.dll" | ForEach-Object {
              Write-Host "Found: $($_.FullName)"
            }
            exit 1
          }
          
          # Set output variable for packaging
          echo "DLL_PATH=$script:actualDllPath" >> $env:GITHUB_ENV

      - name: Package Plugin
        id: package
        run: |
          $pluginName = "${{ env.PLUGIN_NAME }}"
          $packagePath = "package"
          $dllPath = $env:DLL_PATH
          
          # Create package directory structure
          New-Item -ItemType Directory -Path "$packagePath\obs-plugins\64bit" -Force
          New-Item -ItemType Directory -Path "$packagePath\data\obs-plugins\$pluginName" -Force
          
          # Copy plugin DLL
          Copy-Item -Path $dllPath -Destination "$packagePath\obs-plugins\64bit\" -Force
          Write-Host "✅ Plugin DLL packaged successfully"
          
          # Create installation README
          @"
# OBS Multistream Plugin Installation

## Installation Steps:
1. Close OBS Studio completely
2. Copy the contents of this package to your OBS Studio installation directory:
   - Copy `obs-plugins\64bit\$pluginName.dll` to `[OBS Installation]\obs-plugins\64bit\`
3. Restart OBS Studio
4. The Multistream dock will appear in View → Docks → Multistream

## Usage:
1. Open the Multistream dock
2. Click "Add Destination" to configure streaming endpoints  
3. Enter RTMP URL and stream key for each platform
4. Start your normal OBS stream - multistreaming begins automatically

## Platforms Supported:
- Twitch
- YouTube
- Facebook Gaming
- TikTok Live
- Custom RTMP servers

Enjoy multistreaming! 🚀
"@ | Out-File -FilePath "$packagePath\INSTALL.txt" -Encoding UTF8
          
          # Create ZIP package
          $version = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "dev" }
          $zipName = "$pluginName-$version-windows-x64.zip"
          Compress-Archive -Path "$packagePath\*" -DestinationPath $zipName -Force
          
          Write-Host "📦 Package created: $zipName"
          echo "artifacts=$zipName" >> $env:GITHUB_OUTPUT

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-windows-x64
          path: ${{ steps.package.outputs.artifacts }}

  create_release:
    name: 03 - Create Release
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [windows_build]
    permissions:
      contents: write
    steps:
      - name: Get Metadata
        id: metadata
        run: |
          echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.metadata.outputs.version }}
          release_name: OBS Multistream Plugin ${{ steps.metadata.outputs.version }}
          body: |
            # OBS Studio Multistream Plugin v${{ steps.metadata.outputs.version }}
            
            ## Installation
            
            1. Download `obs-multistream-${{ steps.metadata.outputs.version }}-windows-x64.zip`
            2. Extract the contents to your OBS Studio installation directory
            3. Restart OBS Studio
            4. The Multistream dock will appear in View → Docks → Multistream
            
            ## Features
            
            - Stream to multiple RTMP destinations simultaneously
            - Support for Twitch, YouTube, Facebook, TikTok, and custom RTMP servers
            - Shared encoding for optimal performance
            - Individual encoder settings per destination
            - Automatic stream lifecycle management
            
            ## Usage
            
            1. Open the Multistream dock in OBS Studio
            2. Click "Add Destination" to configure streaming endpoints
            3. Enter your RTMP URL and stream key for each platform
            4. Start your normal OBS stream - multistreaming will begin automatically
            
            ## Requirements
            
            - Windows 11 (64-bit)
            - OBS Studio 30.0+ 
            
            Enjoy multistreaming! 🚀
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PLUGIN_NAME }}-windows-x64/${{ needs.windows_build.outputs.artifacts }}
          asset_name: ${{ needs.windows_build.outputs.artifacts }}
          asset_content_type: application/zip 