name: Plugin Build - Ultra Minimal Debug
on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main

env:
  PLUGIN_NAME: 'obs-multistream'

jobs:
  format_check:
    name: 01 - Format Check (Bypassed)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Skip Format Check
        run: |
          echo "‚úÖ Format check bypassed for debugging"
          ls -la src/ || echo "No src directory"

  windows_minimal:
    name: 02 - Windows Minimal Debug
    runs-on: windows-2022
    if: always()
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Basic PowerShell Test
        run: |
          Write-Host "=== Basic PowerShell Test ===" -ForegroundColor Green
          Write-Host "PowerShell version: $($PSVersionTable.PSVersion)" -ForegroundColor Yellow
          Write-Host "Current location: $(Get-Location)" -ForegroundColor Yellow
          Write-Host "Test completed successfully" -ForegroundColor Green

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Verify Checkout Success
        run: |
          Write-Host "=== Verifying Checkout ===" -ForegroundColor Green
          try {
            $location = Get-Location
            Write-Host "Location: $location" -ForegroundColor Yellow
            
            $items = Get-ChildItem -ErrorAction Stop
            Write-Host "Items found: $($items.Count)" -ForegroundColor Yellow
            
            foreach ($item in $items | Select-Object -First 5) {
              Write-Host "  - $($item.Name)" -ForegroundColor Gray
            }
            
            Write-Host "‚úÖ Checkout verification passed" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ùå Checkout verification failed: $_" -ForegroundColor Red
            exit 1
          }

      - name: Test MSBuild Setup
        uses: microsoft/setup-msbuild@v1.1

      - name: Verify MSBuild
        run: |
          Write-Host "=== MSBuild Verification ===" -ForegroundColor Green
          try {
            $msbuild = Get-Command MSBuild.exe -ErrorAction Stop
            Write-Host "MSBuild found: $($msbuild.Source)" -ForegroundColor Yellow
            
            # Just test version, don't try to build anything yet
            MSBuild.exe -version
            Write-Host "‚úÖ MSBuild verification passed" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ùå MSBuild verification failed: $_" -ForegroundColor Red
            Write-Host "Available build tools:" -ForegroundColor Yellow
            Get-Command *build* -ErrorAction SilentlyContinue | Select-Object Name, Source
            exit 1
          }

      - name: Check Project Files
        run: |
          Write-Host "=== Project Files Check ===" -ForegroundColor Green
          
          $requiredFiles = @(
            "obs-multistream.sln",
            "obs-multistream.vcxproj",
            "src\obs-multistream.cpp",
            "src\obs-multistream.h"
          )
          
          $allFound = $true
          foreach ($file in $requiredFiles) {
            if (Test-Path $file) {
              Write-Host "‚úÖ Found: $file" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Missing: $file" -ForegroundColor Red
              $allFound = $false
            }
          }
          
          if ($allFound) {
            Write-Host "‚úÖ All required files found" -ForegroundColor Green
          } else {
            Write-Host "‚ùå Some required files missing" -ForegroundColor Red
            exit 1
          }

      - name: Test Solution Parse
        run: |
          Write-Host "=== Solution Parse Test ===" -ForegroundColor Green
          try {
            # Just test if MSBuild can parse the solution without building
            MSBuild.exe obs-multistream.sln /t:Clean /verbosity:quiet /nologo
            Write-Host "‚úÖ Solution parse successful" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ùå Solution parse failed: $_" -ForegroundColor Red
            Write-Host "Solution content (first 10 lines):" -ForegroundColor Yellow
            Get-Content obs-multistream.sln | Select-Object -First 10
            exit 1
          }

      - name: Create Success Artifact
        run: |
          Write-Host "=== Creating Success Artifact ===" -ForegroundColor Green
          
          $successInfo = @"
Windows Build Debug Success!

PowerShell Version: $($PSVersionTable.PSVersion)
MSBuild Version: $(MSBuild.exe -version | Select-Object -First 1)
Checkout Location: $(Get-Location)
Files Found: $(Get-ChildItem | Measure-Object).Count

All basic checks passed:
‚úÖ PowerShell working
‚úÖ Repository checkout successful  
‚úÖ MSBuild available and working
‚úÖ Required project files present
‚úÖ Solution file parseable

Next steps: Try actual build with OBS headers.
"@
          
          $successInfo | Out-File -FilePath "debug-success.txt" -Encoding UTF8
          Write-Host "‚úÖ Debug artifacts created" -ForegroundColor Green

      - name: Upload Debug Results
        uses: actions/upload-artifact@v3
        with:
          name: debug-success-results
          path: debug-success.txt

  windows_skip_build:
    name: 03 - Skip Actual Build (Debug Mode)
    runs-on: ubuntu-22.04
    if: always()
    needs: [windows_minimal]
    steps:
      - name: Debug Mode Notice
        run: |
          echo "üîß Debug mode active - skipping actual build"
          echo "Once minimal debug passes, we'll enable full build" 