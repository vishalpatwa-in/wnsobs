name: Plugin Build
on:
  push:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main
  pull_request:
    paths-ignore:
      - '**.md'
    branches:
      - master
      - main

env:
  PLUGIN_NAME: 'obs-multistream'

jobs:
  clang_check:
    name: 01 - Code Format Check
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install clang-format
        run: sudo apt-get install -y clang-format-13

      - name: Check code formatting
        run: |
          echo "Checking C++ code formatting..."
          # Only check if files exist
          if find src -name '*.cpp' -o -name '*.h' | head -1 | read; then
            find src -name '*.cpp' -o -name '*.h' | xargs clang-format-13 --dry-run --Werror --style=file
            echo "‚úÖ Code formatting check passed"
          else
            echo "‚ö†Ô∏è No C++ files found to check"
          fi

  windows_build:
    name: 02 - Windows
    runs-on: windows-2022
    if: always()
    outputs:
      artifacts: ${{ steps.package.outputs.artifacts }}
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v1.1

      - name: Setup OBS Development Environment
        run: |
          try {
            # Download OBS Studio development headers from GitHub releases
            $obsVersion = "30.0.2"
            $obsUrl = "https://github.com/obsproject/obs-studio/releases/download/$obsVersion/obs-studio-$obsVersion-full-x64.zip"
            
            Write-Host "üì• Downloading OBS Studio $obsVersion..." -ForegroundColor Green
            Invoke-WebRequest -Uri $obsUrl -OutFile "obs-studio.zip" -TimeoutSec 600 -UseBasicParsing
            
            Write-Host "üìÇ Extracting OBS Studio..." -ForegroundColor Green
            Expand-Archive -Path "obs-studio.zip" -DestinationPath "obs-temp" -Force
            
            # Create development directory structure
            New-Item -ItemType Directory -Path "C:\obs-dev\include" -Force | Out-Null
            New-Item -ItemType Directory -Path "C:\obs-dev\lib" -Force | Out-Null
            New-Item -ItemType Directory -Path "C:\obs-dev\bin" -Force | Out-Null
            
            # Find extracted directory
            $extractedDirs = Get-ChildItem -Path "obs-temp" -Directory
            if ($extractedDirs.Count -eq 0) {
              throw "No directories found in extracted OBS archive"
            }
            
            $obsRoot = $extractedDirs[0].FullName
            Write-Host "üîç Found OBS directory: $obsRoot" -ForegroundColor Yellow
            
            # Copy include files
            $includeSource = "$obsRoot\include"
            if (Test-Path $includeSource) {
              Copy-Item -Path "$includeSource\*" -Destination "C:\obs-dev\include" -Recurse -Force
              Write-Host "‚úÖ Copied include files" -ForegroundColor Green
            } else {
              throw "Include directory not found at $includeSource"
            }
            
            # Copy libraries
            $libPaths = @("$obsRoot\bin\64bit", "$obsRoot\obs-plugins\64bit")
            foreach ($libPath in $libPaths) {
              if (Test-Path $libPath) {
                Copy-Item -Path "$libPath\*.lib" -Destination "C:\obs-dev\lib" -Force -ErrorAction SilentlyContinue
                Copy-Item -Path "$libPath\*.dll" -Destination "C:\obs-dev\bin" -Force -ErrorAction SilentlyContinue
                Write-Host "‚úÖ Copied libraries from $libPath" -ForegroundColor Green
              }
            }
            
            # Verify critical files
            $criticalFiles = @(
              "C:\obs-dev\include\obs-module.h",
              "C:\obs-dev\include\obs-frontend-api.h",
              "C:\obs-dev\include\obs.h"
            )
            
            $missingFiles = @()
            foreach ($file in $criticalFiles) {
              if (Test-Path $file) {
                Write-Host "‚úÖ Found: $file" -ForegroundColor Green
              } else {
                $missingFiles += $file
                Write-Host "‚ùå Missing: $file" -ForegroundColor Red
              }
            }
            
            if ($missingFiles.Count -gt 0) {
              Write-Host "üîç Searching for missing files in subdirectories..." -ForegroundColor Yellow
              foreach ($missingFile in $missingFiles) {
                $fileName = Split-Path $missingFile -Leaf
                $found = Get-ChildItem -Path "C:\obs-dev\include" -Name $fileName -Recurse -ErrorAction SilentlyContinue
                if ($found) {
                  Write-Host "üìç Found $fileName in: $($found -join ', ')" -ForegroundColor Yellow
                }
              }
            }
            
            Write-Host "üöÄ OBS development environment setup complete" -ForegroundColor Green
          }
          catch {
            Write-Error "‚ùå Failed to setup OBS environment: $_"
            exit 1
          }

      - name: Build Plugin
        run: |
          try {
            Write-Host "üî® Building OBS Multistream Plugin..." -ForegroundColor Green
            
            # Build the solution with verbose output for debugging
            $buildArgs = @(
              "obs-multistream.sln"
              "/p:Configuration=Release"
              "/p:Platform=x64"
              "/p:PlatformToolset=v143"
              "/p:WindowsTargetPlatformVersion=10.0"
              "/verbosity:normal"
              "/maxcpucount"
            )
            
            $process = Start-Process -FilePath "MSBuild.exe" -ArgumentList $buildArgs -Wait -PassThru -NoNewWindow
            
            if ($process.ExitCode -ne 0) {
              throw "Build failed with exit code $($process.ExitCode)"
            }
            
            Write-Host "‚úÖ Build completed successfully" -ForegroundColor Green
          }
          catch {
            Write-Error "‚ùå Build failed: $_"
            exit 1
          }

      - name: Verify Build Output
        run: |
          $buildPaths = @(
            "bin\x64\Release",
            "bin\Release", 
            "x64\Release",
            "Release",
            ".\Release",
            ".\x64\Release"
          )
          
          $dllFound = $false
          $actualDllPath = ""
          
          Write-Host "üîç Searching for plugin DLL..." -ForegroundColor Yellow
          
          foreach ($path in $buildPaths) {
            $dllPath = "$path\${{ env.PLUGIN_NAME }}.dll"
            if (Test-Path $dllPath) {
              Write-Host "‚úÖ Found plugin DLL at: $dllPath" -ForegroundColor Green
              $actualDllPath = $dllPath
              $dllFound = $true
              break
            } else {
              Write-Host "‚ö†Ô∏è Not found: $dllPath" -ForegroundColor Yellow
            }
          }
          
          if (-not $dllFound) {
            Write-Host "‚ùå Plugin DLL not found in expected locations" -ForegroundColor Red
            Write-Host "üìÅ Searching entire directory for DLL files..." -ForegroundColor Yellow
            Get-ChildItem -Recurse -Filter "*.dll" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Found DLL: $($_.FullName)" -ForegroundColor Cyan
            }
            throw "Plugin DLL not found"
          }
          
          # Set environment variable for packaging
          echo "DLL_PATH=$actualDllPath" >> $env:GITHUB_ENV
          Write-Host "üìù Set DLL_PATH=$actualDllPath" -ForegroundColor Green

      - name: Package Plugin
        id: package
        run: |
          try {
            $pluginName = "${{ env.PLUGIN_NAME }}"
            $packagePath = "package"
            $dllPath = $env:DLL_PATH
            
            Write-Host "üì¶ Creating package..." -ForegroundColor Green
            
            # Create package directory structure
            New-Item -ItemType Directory -Path "$packagePath\obs-plugins\64bit" -Force | Out-Null
            New-Item -ItemType Directory -Path "$packagePath\data\obs-plugins\$pluginName" -Force | Out-Null
            
            # Copy plugin DLL
            Copy-Item -Path $dllPath -Destination "$packagePath\obs-plugins\64bit\" -Force
            Write-Host "‚úÖ Plugin DLL packaged: $dllPath" -ForegroundColor Green
            
            # Create installation README
            $installContent = @"
# OBS Multistream Plugin Installation

## Installation Steps:
1. Close OBS Studio completely
2. Copy the contents of this package to your OBS Studio installation directory:
   - Copy ``obs-plugins\64bit\$pluginName.dll`` to ``[OBS Installation]\obs-plugins\64bit\``
3. Restart OBS Studio
4. The Multistream dock will appear in View ‚Üí Docks ‚Üí Multistream

## Usage:
1. Open the Multistream dock
2. Click "Add Destination" to configure streaming endpoints  
3. Enter RTMP URL and stream key for each platform
4. Start your normal OBS stream - multistreaming begins automatically

## Platforms Supported:
- Twitch
- YouTube
- Facebook Gaming
- TikTok Live
- Custom RTMP servers

## Requirements:
- Windows 11 (64-bit)
- OBS Studio 30.0+

Enjoy multistreaming! üöÄ
"@
            
            $installContent | Out-File -FilePath "$packagePath\INSTALL.txt" -Encoding UTF8
            
            # Create ZIP package
            $version = if ($env:GITHUB_REF -match 'refs/tags/(.*)') { $matches[1] } else { "dev" }
            $zipName = "$pluginName-$version-windows-x64.zip"
            Compress-Archive -Path "$packagePath\*" -DestinationPath $zipName -Force
            
            Write-Host "üì¶ Package created: $zipName" -ForegroundColor Green
            echo "artifacts=$zipName" >> $env:GITHUB_OUTPUT
          }
          catch {
            Write-Error "‚ùå Packaging failed: $_"
            exit 1
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.PLUGIN_NAME }}-windows-x64
          path: ${{ steps.package.outputs.artifacts }}

  create_release:
    name: 03 - Create Release
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: [windows_build]
    permissions:
      contents: write
    steps:
      - name: Get Metadata
        id: metadata
        run: |
          echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.metadata.outputs.version }}
          release_name: OBS Multistream Plugin ${{ steps.metadata.outputs.version }}
          body: |
            # OBS Studio Multistream Plugin v${{ steps.metadata.outputs.version }}
            
            ## Installation
            
            1. Download `obs-multistream-${{ steps.metadata.outputs.version }}-windows-x64.zip`
            2. Extract the contents to your OBS Studio installation directory
            3. Restart OBS Studio
            4. The Multistream dock will appear in View ‚Üí Docks ‚Üí Multistream
            
            ## Features
            
            - Stream to multiple RTMP destinations simultaneously
            - Support for Twitch, YouTube, Facebook, TikTok, and custom RTMP servers
            - Shared encoding for optimal performance
            - Individual encoder settings per destination
            - Automatic stream lifecycle management
            
            ## Usage
            
            1. Open the Multistream dock in OBS Studio
            2. Click "Add Destination" to configure streaming endpoints
            3. Enter your RTMP URL and stream key for each platform
            4. Start your normal OBS stream - multistreaming will begin automatically
            
            ## Requirements
            
            - Windows 11 (64-bit)
            - OBS Studio 30.0+ 
            
            Enjoy multistreaming! üöÄ
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.PLUGIN_NAME }}-windows-x64/${{ needs.windows_build.outputs.artifacts }}
          asset_name: ${{ needs.windows_build.outputs.artifacts }}
          asset_content_type: application/zip 